import os
import random
import shutil
import requests
import yaml

from github import Github
from pathlib import Path

from github.GithubException import UnknownObjectException, BadCredentialsException

def GenerateMod():
    i = input("Personal Access Token:\n(Leave blank to grab from Token.yml)\n")
    if len(i) == 0:
        f = open("Token.yml", "r")
        yml = yaml.safe_load(f)
        g = Github(yml["Token"])
    else:
        g = Github(i)

    try:
        repo = g.get_repo("FAForever/fa")
    except BadCredentialsException as error:
        print("Invalid Token!")
        return

    try:
        pullID = int(input('Enter Pull Request ID:\n'))
    except ValueError as error:
        print("This must be a number!")
        return

    try:
        pr = repo.get_pull(pullID)
    except UnknownObjectException as error:
        print("Invalid PR ID!")
        return

    files = pr.get_files()

    modName = "PrToMod_%s" % pr.title.replace(" ", "_")
    modPath = "./" + modName

    try:
        os.mkdir(modPath)
        os.mkdir(modPath + "/hook")
    except OSError as error:
        shutil.rmtree(modPath)
        os.mkdir(modPath)
        os.mkdir(modPath + "/hook")

    for file in files:
        fileName = file.filename
        currentDir = ("./%s" % modPath) + "/hook"
        i = 0
        for d in fileName.split("/"):
            if i < len(fileName.split("/")) - 1:
                try:
                    os.mkdir(currentDir + "/" + d)
                except OSError as error:
                    pass

                currentDir = currentDir + "/" + d
            else:
                Path(currentDir + "/" + d).touch()
                r = requests.get(file.raw_url, allow_redirects=True)
                f = open(currentDir + "/" + d, "w")

                fileContents = r.text
                if ".bp" in fileName:
                    fileContents = fileContents.replace("UnitBlueprint {", "UnitBlueprint {\n    Merge = true,")
                f.write(fileContents)
            i = i + 1

    Path("./%s/mod_info.lua" % modName).touch()
    f = open("./%s/mod_info.lua" % modName, "w")
    f.write("name = \"%s\"\n" % modName.replace("_", " "))
    f.write("version = %s\n" % 1)
    f.write("copyright = \"NA\"\n")
    f.write("description = \"%s\" \n" % ("Mod generated by PrToMod based of PR %s" % str(pullID)))
    f.write("author = \"%s with PrToMod by SpikeyNoob\"\n" % pr.get_commits()[0].author.login)
    f.write("url = \"%s\"\n" % pr.url)
    f.write("uid = \"%s\"\n" % (modName + str(random.randint(10000, 90000))))
    f.write("exclusive = false\nui_only = false\nconflicts = {}\nselectable = true\nenabled = true")
    f.close()
    print("Done!")


if __name__ == '__main__':
    GenerateMod()
